name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      bump_version:
        description: 'Bump version and create release'
        required: false
        default: false
        type: boolean
  push:
    tags: [ 'v*' ]

env:
  PYTHONPATH: ${{ github.workspace }}
  POETRY_VIRTUALENVS_CREATE: true
  POETRY_VIRTUALENVS_IN_PROJECT: true
  POETRY_CACHE_DIR: ${{ github.workspace }}/.poetry-cache

jobs:
  version:
    name: Version Management
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.bump_version == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      should_release: ${{ steps.bump.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version and create tag
        id: bump
        run: |
          # Get current version
          CURRENT_VERSION=$(poetry version -s)
          # Bump version
          poetry version patch
          NEW_VERSION=$(poetry version -s)

          # Update changelog
          poetry run changelog generate-md CHANGELOG.md

          # Stage changes
          git add pyproject.toml CHANGELOG.md
          git commit -m "Bump version to $NEW_VERSION"

          # Create and push tag
          TAG="v$NEW_VERSION"
          git tag $TAG
          git push origin $TAG
          git push origin main

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT

  release:
    name: Release
    needs: version
    if: |
      startsWith(github.ref, 'refs/tags/') ||
      (needs.version.outputs.should_release == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: dist/*
      #     generate_release_notes: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}

      - name: Publish to PyPI
        if: success()
        run: poetry publish --no-interaction
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
