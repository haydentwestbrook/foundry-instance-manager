name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
        pip install pre-commit changelog

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

    - name: Run linting
      run: |
        poetry run pre-commit run --all-files

    - name: Run tests
      run: |
        poetry run pytest

    - name: Bump version
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: bump
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Temporarily disable pre-commit hooks
        git config --unset core.hooksPath || true
        # Get current version before bumping
        CURRENT_VERSION=$(poetry run bump2version --dry-run --list patch | grep current_version | sed -r s,"^.*=",,)
        # Bump version
        poetry run bump2version patch
        # Re-enable pre-commit hooks
        git config core.hooksPath .git/hooks
        # Run pre-commit hooks manually and allow them to modify files
        pre-commit run --all-files || true
        # Stage all changes including those from pre-commit hooks
        git add .
        # Commit all changes in one commit
        git commit -m "Bump version and apply pre-commit fixes" || true
        # Get the new version
        NEW_VERSION=$(poetry run bump2version --dry-run --list patch | grep current_version | sed -r s,"^.*=",,)
        # Push changes first
        git push origin HEAD:main
        # Create and push the tag if it doesn't exist
        if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
          git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
        fi
        # Set output for next step
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        # Set a flag to indicate we should run release steps
        echo "should_release=true" >> $GITHUB_OUTPUT

    - name: Generate changelog
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || steps.bump.outputs.should_release == 'true')
      run: |
        poetry run changelog

    - name: Build package
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || steps.bump.outputs.should_release == 'true')
      run: |
        poetry build

    - name: Create GitHub release
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || steps.bump.outputs.should_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || steps.bump.outputs.should_release == 'true')
      run: |
        poetry publish
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
